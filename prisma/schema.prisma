generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

type numberPromote {
  embed        Json
  lastEdited   DateTime
  lastPromoted DateTime
  lastMsg      String
  lastUser     DateTime
}

type numberVIP {
  expiry DateTime
  hidden Boolean
  name   String
}

model Numbers {
  number    String         @id @map("_id")
  channelID String
  guildID   String?
  userID    String?
  blocked   String[]
  contacts  String[]
  expiry    DateTime
  mentions String[]
  promote   numberPromote?
  vip       numberVIP?
  waiting   Boolean        @default(false)
  createdAt DateTime       @default(now())

  outgoingCalls Calls[] @relation("to")
  incomingCalls Calls[] @relation("from")

  guild GuildConfigs? @relation(fields: guildID, references: id)

  @@unique(fields: [channelID], name: "channel")
  @@index(fields: [guildID], name: "guild")
  @@index(fields: [userID], name: "user")
}

// Calls
type atAndBy {
  at DateTime @default(now())
  by String
}

model CallMessages {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  callID             String
  call               Calls    @relation(fields: [callID], references: [id])
  forwardedMessageID String
  originalMessageID  String
  sentAt             DateTime
  sender             String
}

model Calls {
  id String @id @map("_id")

  toNum   String
  fromNum String

  to   Numbers? @relation(name: "to", fields: [toNum], references: [number])
  from Numbers? @relation(name: "from", fields: [fromNum], references: [number])

  pickedUp   atAndBy?
  randomCall Boolean  @default(false)
  started    atAndBy
  ended      atAndBy?

  messages CallMessages[]

  active Boolean @default(true)

  @@index(fields: [toNum, fromNum], name: "participants")
  @@index(fields: [active], name: "active")
}

model GuildConfigs {
  id String @id @map("_id")

  whitelisted Boolean @default(false)
  locale      String  @default("en-US")

  numbers Numbers[]
  strikes Strikes[]
}

model Accounts {
  id String @id @map("_id")

  balance            Int       @default(0)
  dailyClaimedAt     DateTime?
  vipMonthsRemaining Int       @default(0)

  strikes Strikes[]
}

enum StrikeOffenderType {
  USER
  GUILD
}

model Strikes {
  id       String             @id @map("_id")
  offender String
  reason   String
  type     StrikeOffenderType

  created atAndBy

  account     Accounts     @relation(fields: [offender], references: [id])
  guildConfig GuildConfigs @relation(fields: [offender], references: [id])

  @@index(fields: [offender], name: "offender")
}

model Blacklist {
  id String @id @map("_id")
}
